# Generated by Django 5.2.5 on 2025-08-13 02:52

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('nick', models.CharField(db_index=True, error_messages={'blank': 'Informe o apelido.', 'max_length': 'Apelido deve ter no máximo 50 caracteres.'}, max_length=50)),
                ('full_name', models.CharField(error_messages={'blank': 'Informe o nome completo.'}, max_length=150)),
                ('email', models.EmailField(error_messages={'invalid': 'Informe um e-mail válido.', 'unique': 'Já existe um usuário com este e-mail.'}, max_length=254, unique=True)),
                ('phone', models.CharField(error_messages={'blank': 'Informe o telefone.'}, max_length=20, validators=[django.core.validators.RegexValidator(message='Informe um telefone válido (somente números, com DDD; ex.: 85999998888).', regex='^\\+?\\d{10,14}$')])),
                ('cep', models.CharField(error_messages={'blank': 'Informe o CEP.'}, max_length=9, validators=[django.core.validators.RegexValidator(message='Informe um CEP válido no formato 00000-000.', regex='^\\d{5}-?\\d{3}$')])),
                ('profile_photo_url', models.URLField(blank=True, error_messages={'invalid': 'Informe uma URL válida para a foto de perfil.'}, null=True)),
                ('account_created_at', models.DateTimeField(auto_now_add=True)),
                ('birth_date', models.DateField(error_messages={'invalid': 'Informe uma data de nascimento válida (AAAA-MM-DD).'})),
                ('role', models.CharField(choices=[('EDITOR', 'Editor'), ('CONTRACTOR', 'Contractor')], error_messages={'blank': 'Informe o tipo de usuário (Editor ou Contractor).'}, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'accounts_account',
                'ordering': ['-account_created_at'],
            },
        ),
        migrations.CreateModel(
            name='Contractor',
            fields=[
            ],
            options={
                'verbose_name': 'Contractor',
                'verbose_name_plural': 'Contractors',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('accounts.account',),
        ),
        migrations.CreateModel(
            name='Editor',
            fields=[
            ],
            options={
                'verbose_name': 'Editor',
                'verbose_name_plural': 'Editors',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('accounts.account',),
        ),
    ]
